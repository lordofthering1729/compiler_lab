D:\dasishang\compiler\lab\lab-code

docker run -it --rm -v D:\dasishang\compiler\lab\compiler_lab\lab-code:/root/compiler maxxing/compiler-dev bash

clang hello.S -c -o hello.o -target riscv32-unknown-linux-elf -march=rv32im -mabi=ilp32
ld.lld hello.o -L$CDE_LIBRARY_PATH/riscv32 -lsysy -o hello
qemu-riscv32-static hello


本地运行koopa:
koopac hello.koopa | llc --filetype=obj -o hello.o
clang hello.o -L$CDE_LIBRARY_PATH/native -lsysy -o hello
./hello

Lv1
EBNF:
CompUnit  ::= FuncDef;
FuncDef   ::= FuncType IDENT "(" ")" Block;
FuncType  ::= "int";
Block     ::= "{" Stmt "}";
Stmt      ::= "return" Number ";";
Number    ::= INT_CONST;

make
build/compiler -koopa hello.c -o hello.koopa

autotest -koopa -s lv1 /root/compiler

Lv2
make
build/compiler -riscv hello.c -o hello.txt

Lv3
CompUnit    ::= FuncDef;
FuncDef     ::= FuncType IDENT "(" ")" Block;
FuncType    ::= "int";
Block       ::= "{" Stmt "}";
Stmt        ::= "return" Exp ";";

Exp         ::= LOrExp;
PrimaryExp  ::= "(" Exp ")" | Number;
Number      ::= INT_CONST;
UnaryExp    ::= PrimaryExp | UnaryOp UnaryExp;
UnaryOp     ::= "+" | "-" | "!";
MulExp      ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
AddExp      ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp      ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp       ::= RelExp | EqExp ("==" | "!=") RelExp;
LAndExp     ::= EqExp | LAndExp "&&" EqExp;
LOrExp      ::= LAndExp | LOrExp "||" LAndExp;

build/compiler -koopa hello.c -o hello.koopa
build/compiler -riscv hello.c -o hello.S
autotest -koopa -s lv3 /root/compiler
autotest -riscv -s lv3 /root/compiler